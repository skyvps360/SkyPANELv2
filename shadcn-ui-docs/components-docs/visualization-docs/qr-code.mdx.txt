# QR Code
URL: /components/visualization/qr-code
QR code generator component for React and Next.js applications. Built with TypeScript support, Tailwind CSS styling, and shadcn/ui design featuring SVG rendering, custom colors, and server component support.

***

title: QR Code
description: QR code generator component for React and Next.js applications. Built with TypeScript support, Tailwind CSS styling, and shadcn/ui design featuring SVG rendering, custom colors, and server component support.
icon: QrCode
------------

<PoweredBy
  packages={[
{ name: 'qrcode', url: 'https://github.com/soldair/node-qrcode' },
{ name: 'culori', url: 'https://culorijs.org/' },
]}
/>

<Preview path="qr-code" />

## Installation

<Installer packageName="qr-code" />

## Features

* **String-to-QR generation** - Convert any text data to QR codes using qrcode library integration
* **SVG rendering** - Crisp scalable graphics at any size using JavaScript vector output
* **shadcn/ui theming** - CSS variable integration with foreground/background colors using Tailwind CSS
* **Custom colors** - Foreground and background color controls using culori library for Next.js projects
* **Error correction** - Configurable robustness levels for better scanning reliability using TypeScript props
* **Server components** - React Server Component support with manual color props for React applications
* **Open source** - Free QR code component with responsive sizing and accessibility features

## Examples

### Styling

The QR code is wrapped in a `div` so you can pass in a custom class name to style it.

<Preview path="qr-code-styling" />

### Robustness

You can change the robustness of the QR code by passing the `robustness` prop. Higher levels offer a better error resistance but reduce the symbol's capacity.

<Preview path="qr-code-robust" />

### Server Component

You can also use the `QRCode` component as a React Server Component, however you'll need to pass in the `foreground` and `background` prop manually as hex values.

<Preview path="qr-code-server" />

## Use Cases

* **Contact sharing** - vCard and contact information distribution
* **URL sharing** - Website links and deep linking for mobile apps
* **Authentication** - Two-factor auth and secure login processes
* **Payment systems** - Cryptocurrency addresses and payment links

## Implementation

Built with qrcode library for generation. Uses culori for color processing. SVG output for scalability. Supports both client and server components with theme integration.
