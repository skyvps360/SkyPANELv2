{
  "projectName": "ContainerStacks",
  "description": "Open-source CaaS platform for container hosting, VPS management, and orchestration with billing, monitoring, and collaboration features",
  "language": "typescript",
  "frameworks": ["react", "express", "postgresql"],
  "packageManager": "npm",
  "scripts": {
    "client": "npm run client:dev",
    "server": "npm run server:dev",
    "fullStack": "npm run dev",
    "lint": "npm run lint",
    "build": "npm run build",
    "typecheck": "npm run check"
  },
  "paths": {
    "frontend": "src/",
    "backend": "api/",
    "docs": "docs/",
    "architectureDocs": ".trae/documents/ContainerStacks_Technical_Architecture.md",
    "prdDocs": ".trae/documents/ContainerStacks_PRD.md",
    "env": ".env"
  },
  "linting": {
    "tool": "eslint",
    "configFiles": ["eslint.config.js"],
    "notes": [
      "Type-aware rules enabled; maintain TypeScript strictness",
      "Do not add or remove comments unless explicitly requested"
    ]
  },
  "testing": {
    "typecheckOnly": true,
    "commands": ["npm run check"]
  },
  "codingGuidelines": [
    "Use functional React components with hooks",
    "Leverage context providers in `src/contexts/` for shared state",
    "Match existing Tailwind + utility-first styling approach",
    "Backend routes reside in `api/routes/`; keep controllers thin and delegate to services under `api/services/`",
    "Preserve REST patterns and existing middleware in `api/middleware/`",
    "Implement Row Level Security (RLS) for multi-tenancy in PostgreSQL",
    "Follow the data model in architecture docs for database schemas"
  ],
  "auth": {
    "contextProvider": "src/contexts/AuthContext.tsx",
    "protectedRoutes": "Wrap with `ProtectedRoute` or `AdminRoute` in `src/App.tsx`",
    "roles": ["admin", "organization_admin", "developer", "collaborator"]
  },
  "dataStores": {
    "primary": "PostgreSQL (migrated from Supabase)",
    "caching": "Redis via `ioredis` and Bull queues",
    "metrics": "InfluxDB for monitoring data",
    "storage": "Supabase Storage for backups (if still in use)"
  },
  "integrations": [
    "PayPal billing (`@paypal/paypal-server-sdk`)",
    "Email via `nodemailer` and SMTP2GO",
    "Linode/Akamai API for VPS provisioning",
    "Docker Engine and Kubernetes for container orchestration"
  ],
  "features": [
    "Container lifecycle management (deploy, scale, monitor)",
    "VPS reselling with markup pricing",
    "Multi-tenant architecture with organizations",
    "Built-in billing, wallet, and invoice management",
    "Support ticket system with email notifications",
    "Marketplace for pre-built apps and custom images",
    "Monitoring dashboard with metrics and logs",
    "Backup and restore capabilities",
    "Collaboration tools for team management",
    "Admin panel for platform configuration"
  ],
  "reviewChecklist": [
    "Run `npm run lint` and `npm run check` before committing",
    "Confirm API changes align with OpenAPI spec `openapi.json`",
    "Update docs under `docs/` and `.trae/documents/` for feature changes",
    "Maintain consistent error handling and toast notifications in UI (`sonner`/`react-hot-toast` usage)",
    "Ensure database migrations follow the DDL in architecture docs",
    "Test RLS policies for multi-tenancy security"
  ],
  "mergeStrategy": "rebase",
  "communication": {
    "statusUpdates": "Summaries should reference touched files with backticks and relate to PRD/architecture docs",
    "verbosity": "Prefer concise bullet notes; avoid large blocks of text"
  }
}
