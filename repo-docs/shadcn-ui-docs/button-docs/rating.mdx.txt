# React Rating Button
URL: /button/rating
React rating button with interactive star ratings and hover effects. Lucide icons with keyboard navigation and form integration using TypeScript and shadcn/ui.

***

title: React Rating Button
description: React rating button with interactive star ratings and hover effects. Lucide icons with keyboard navigation and form integration using TypeScript and shadcn/ui.
icon: Star
component: true
---------------

<PoweredBy
  packages={[
  { name: "React", url: "https://react.dev" },
  { name: "Lucide React", url: "https://lucide.dev/" },
  { name: "Tailwind CSS", url: "https://tailwindcss.com" },
]}
/>

<Callout title="Building rating interactions?">
  [Join our Discord community](https://discord.com/invite/Z9NVtNE7bj) for help
  from other developers.
</Callout>

<br />

Rating systems are everywhere—product reviews, content feedback, skill assessments. But most are just static star icons that highlight on click. Basic. Uninspiring. No hover previews or smooth transitions. Meanwhile, users expect rich feedback that guides their selection and confirms their choice. This React component gives you interactive star rating buttons with hover previews, smooth animations, and comprehensive accessibility that make every rating feel intentional and satisfying.

<Preview path="button/rating" />

Built for React applications with TypeScript and Next.js. Uses Lucide icons for crisp star rendering at any size. The component doesn't just track ratings—it provides hover previews, keyboard navigation, and smooth transitions between states. Form integration works seamlessly with React Hook Form and other libraries. Perfect for shadcn/ui design systems with consistent styling patterns.

## Why most rating components feel disconnected

Developers throw five star icons in a row and add click handlers. Maybe they change the fill color if they're being thorough. The problem? Users can't preview their selection before committing. There's no visual feedback during interaction. Keyboard users get ignored entirely. It's functional but not user-friendly.

This component provides hover previews that show exactly what rating you're about to select. Smooth transitions between states create visual continuity. Keyboard navigation with arrow keys feels natural and accessible. The compound component pattern gives you full control over styling while handling all the complex interaction states automatically.

Built with proper ARIA attributes and screen reader support, so all users can provide meaningful feedback regardless of how they interact with your interface.

## Installation

<Installer packageName="rating" />

## Examples

### Style Variations

Different colors and sizes for various UI contexts:

<Preview path="button/rating-styles" />

### Interactive States

Controlled, read-only, and interactive rating examples:

<Preview path="button/rating-interactive" />

## Features

* **Interactive star buttons** with click and hover rating selection using JavaScript events
* **Hover preview states** showing rating selection before confirmation
* **Keyboard navigation** with arrow key support and accessible focus management
* **Form integration** with hidden input fields for seamless form library compatibility
* **Customizable appearance** with star count, size, colors, and icons using Tailwind CSS
* **Read-only mode** for display-only ratings with proper ARIA attributes
* **TypeScript definitions** with complete interface definitions and prop validation
* **Accessible design** with comprehensive ARIA support and screen reader compatibility
* **Compound component pattern** for flexible composition and styling control
* **Lucide icon integration** for crisp, scalable star rendering at any size

## Use Cases

This free open source React component works perfectly for:

* **Product reviews** - Customer feedback and rating collection systems built with Next.js
* **Content rating** - Article, video, and media quality assessments using TypeScript
* **Skill assessment** - User proficiency and experience level indicators
* **Satisfaction surveys** - Service quality and experience feedback forms
* **Course evaluation** - Educational content and instructor rating systems
* **Restaurant reviews** - Food and service quality rating interfaces
* **App store ratings** - Software and mobile app user feedback collection
* **Performance reviews** - Employee and team assessment rating tools

## API Reference

### Rating

The container component providing context for all rating functionality.

| Prop            | Type                      | Default | Description                                      |
| --------------- | ------------------------- | ------- | ------------------------------------------------ |
| `defaultValue`  | `number`                  | `0`     | Initial rating value for uncontrolled mode       |
| `value`         | `number`                  | -       | Current rating value for controlled mode         |
| `onValueChange` | `(value: number) => void` | -       | Callback when rating value changes               |
| `max`           | `number`                  | `5`     | Maximum rating value (number of stars)           |
| `readOnly`      | `boolean`                 | `false` | Disables interaction and shows display-only mode |
| `disabled`      | `boolean`                 | `false` | Disables all rating interactions                 |
| `name`          | `string`                  | -       | Form input name for form integration             |
| `required`      | `boolean`                 | `false` | Makes rating selection required for forms        |
| `className`     | `string`                  | -       | Additional CSS classes for container             |

### RatingButton

Individual star button component for rating selection.

| Prop         | Type                   | Default | Description                                   |
| ------------ | ---------------------- | ------- | --------------------------------------------- |
| `size`       | `number`               | `24`    | Icon size in pixels for consistent scaling    |
| `className`  | `string`               | -       | Additional CSS classes for star styling       |
| `icon`       | `React.ElementType`    | `Star`  | Custom icon component (must accept size prop) |
| `filledIcon` | `React.ElementType`    | `Star`  | Icon for filled/selected state                |
| `emptyIcon`  | `React.ElementType`    | `Star`  | Icon for empty/unselected state               |
| `...props`   | `ButtonHTMLAttributes` | -       | All native button props supported             |

### Rating States

| State      | Visual           | Interaction          | Use Case                 |
| ---------- | ---------------- | -------------------- | ------------------------ |
| `empty`    | Outlined stars   | Clickable, hoverable | Unrated content          |
| `filled`   | Solid stars      | Clickable, hoverable | Current rating display   |
| `hover`    | Preview fill     | Temporary highlight  | Selection preview        |
| `readOnly` | Static display   | No interaction       | Display existing ratings |
| `disabled` | Muted appearance | No interaction       | Unavailable rating       |

### Keyboard Navigation

| Key           | Action        | Description                       |
| ------------- | ------------- | --------------------------------- |
| `Arrow Right` | Next star     | Increases rating by 1             |
| `Arrow Left`  | Previous star | Decreases rating by 1             |
| `Home`        | First star    | Sets rating to 1                  |
| `End`         | Last star     | Sets rating to maximum            |
| `Space/Enter` | Confirm       | Confirms current rating selection |

## Common gotchas

**Star count changes**: Changing the `max` prop after mount can cause rating value inconsistencies. Either reset the value when changing max or validate that existing values don't exceed the new maximum.

**Icon sizing issues**: Custom icons must accept a `size` prop for consistent scaling. Lucide icons work perfectly, but custom SVGs need to implement size-based width/height attributes.

**Form integration timing**: When using with form libraries, ensure the rating component's name prop matches your form schema. The hidden input updates synchronously with rating changes for proper validation.

**Hover state conflicts**: On touch devices, hover states can persist after touch. The component handles this, but custom CSS hover styles might interfere with touch interactions.

**Accessibility overrides**: Custom styling can interfere with accessibility features. Ensure sufficient color contrast and don't remove focus indicators when customizing appearance.

**Controlled vs uncontrolled**: Mixing controlled and uncontrolled usage patterns can cause state synchronization issues. Choose one pattern and stick with it throughout your component hierarchy.

## You might also like

Explore other interactive button components for React applications:

<Cards>
  <Card href="/button/icon-button" title="Icon Button" description="Animated icon buttons with particle burst effects" />

  <Card href="/button/counter" title="Counter Button" description="Animated counter with increment/decrement buttons" />

  <Card href="/button/flip-button" title="Flip Button" description="3D flip animations with smooth physics transitions" />

  <Card href="/button/liquid-button" title="Liquid Button" description="Animated buttons with fluid fill effects" />
</Cards>

## Questions developers actually ask

<Accordions type="single">
  <Accordion id="form-libraries" title="How do I integrate with React Hook Form or Formik?">
    Use the controlled mode with value and onValueChange props. Register the rating with your form library and pass the form's setValue function to onValueChange. The hidden input ensures proper form submission.
  </Accordion>

  <Accordion id="custom-icons" title="Can I use custom icons instead of stars?">
    Yes, pass custom icon components to the icon, filledIcon, and emptyIcon props on RatingButton. Ensure your icons accept a size prop for consistent scaling across different rating sizes.
  </Accordion>

  <Accordion id="half-ratings" title="How do I implement half-star ratings?">
    The component supports integer ratings by default. For half-star ratings, you'll need to modify the component or use a different approach with fractional values and custom icon rendering.
  </Accordion>

  <Accordion id="validation" title="How do I add validation and error states?">
    Use the required prop for basic validation. For custom validation, implement error checking in your form library and apply error styling via className based on validation state.
  </Accordion>

  <Accordion id="server-side" title="Does this work with server-side rendering?">
    Yes, the component works with SSR in Next.js. The initial rating state renders consistently on server and client. Use defaultValue for uncontrolled SSR or ensure controlled values are stable.
  </Accordion>

  <Accordion id="mobile-touch" title="How does touch interaction work on mobile devices?">
    Touch events work naturally with tap-to-select behavior. Hover previews are disabled on touch devices to prevent sticky hover states. The component automatically adapts interaction patterns for touch interfaces.
  </Accordion>
</Accordions>
